// FUN√á√ÉO DA IA ///////////////////////////////////////////////////////////////////////////////////////////////////////////

// ‚ú® ANALISE COM SA√çDA DUPLA: BLOCO + LOUSA **********************************************************************************************
function analyzeWithAI() {
  const editor = document.getElementById("editor");
  const sentenceGroups = editor.querySelectorAll(".sentence-group");
  const textArray = [];

  const feedbackDiv = document.getElementById("simbol-feedback");
  if (feedbackDiv) {
    feedbackDiv.innerHTML = '<span style="color:#001f3f;">‚è≥ Analisando texto... ‚ú®</span>';
  }

  // Limpa marca√ß√µes anteriores nos blocos
  document.querySelectorAll(".processed-symbol").forEach(el => {
    if (el.innerText.includes("üíé") || el.innerText.includes("üåÄ") || el.innerText.includes("ü•à")) {
      el.remove();
    }
  });

  sentenceGroups.forEach(group => {
    const number = group.querySelector(".number-marker")?.innerText.trim();
    const text = group.querySelector(".text-group")?.innerText.trim();
    if (number && text) {
      textArray.push(`${number} >\n${text}`);
    }
  });

  const fullText = textArray.join("\n\n");

  fetch('/analisar', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ text: fullText })
  })
    .then(res => res.json())
    .then(data => {
      const resposta = data.result;
      if (!resposta || resposta.startsWith("‚ö†Ô∏è")) {
        alert(resposta || "Erro desconhecido");
        return;
      }

      // üß† Processa a resposta para cada bloco
      const linhas = resposta.split('\n');
      const explicacoesPorBloco = {};

      linhas.forEach(linha => {
        const matchNumero = linha.match(/\[(\d+)\]/); // extrai o n√∫mero entre colchetes
        if (!matchNumero) return;
        const numero = parseInt(matchNumero[1]);

        // Salva explica√ß√£o completa para a lousa
        if (!explicacoesPorBloco[numero]) {
          explicacoesPorBloco[numero] = [];
        }
        explicacoesPorBloco[numero].push(linha);

        // INSERE APENAS O S√çMBOLO NO BLOCO
        const group = sentenceGroups[numero - 1];
        if (!group) return;

        let simbolo = '';
        if (linha.includes('üíé')) simbolo = 'üíé J√≥ia Liter√°ria';
        else if (linha.includes('üåÄ')) simbolo = 'üåÄ Potencial Dispersivo';
        else if (linha.includes('ü•à')) simbolo = 'ü•à Potencial Desperdi√ßado';
        else return;

        const idMarcacao = `marcacao-${Date.now()}-${numero}-${simbolo}`;

        const marcador = document.createElement("div");
        marcador.className = "processed-symbol-gold marcacao-com-fechar";
        marcador.id = idMarcacao;
        marcador.innerHTML = `
          <span>${simbolo}</span>
          <button class="marcacao-fechar" onclick="removerMarcacao('${idMarcacao}')">‚úñ</button>
        `;
        group.appendChild(marcador);
      });

      // üß† GERA A LOUSA COM EXPLICA√á√ïES
      const lousa = document.getElementById("inspiracao-lousa");
      const titulo = lousa.querySelector("strong");
      const texto = document.getElementById("inspiracao-texto");

      lousa.style.display = "block";
      titulo.innerText = "‚Ä¢ MARCA√á√ïES ESPECIAIS üíé¬Æ";
      texto.innerText = "üëÅ Gerando leitura da Fl√°via...";
      let textoFinal = ""; // <-- declara√ß√£o correta antes de usar

      Object.keys(explicacoesPorBloco).sort((a, b) => a - b).forEach(numero => {
        explicacoesPorBloco[numero].forEach(expl => {
          const explComHTML = expl
            .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>') // negrito
            .replace(/\*(.*?)\*/g, '<em>$1</em>')             // it√°lico
            .replace(/\n/g, '<br>');                          // quebra de linha

          textoFinal += `${explComHTML}<br><br>`;
        });
      });

      texto.innerHTML = textoFinal;

      // ‚úÖ Feedback final
      if (feedbackDiv) {
        feedbackDiv.innerHTML = '<span style="color:green;">‚úîÔ∏è An√°lise conclu√≠da!</span>';
        setTimeout(() => {
          feedbackDiv.innerHTML = '';
        }, 2000);
      }
    })
    .catch(err => {
      if (feedbackDiv) {
        feedbackDiv.innerHTML = '‚ùå Erro ao analisar texto.';
      }
      alert("Erro na IA: " + err);
    });
}

// INSPIRE üëÅ‚Äçüó® ***************************************************************************************************************
// INSPIRE üëÅ‚Äçüó® ***************************************************************************************************************
function inspirarComFlavia() {
  const editor = document.getElementById("editor");
  const rawText = editor.innerText.trim();

  if (!rawText) {
    alert("‚ö†Ô∏è O editor est√° vazio.");
    return;
  }

  // üîÑ Mostra a lousa e coloca mensagem tempor√°ria
  const lousa = document.getElementById("inspiracao-lousa");
  const texto = document.getElementById("inspiracao-texto");
  lousa.style.display = "block";
  texto.innerText = "üå∫ Estou analisando com cuidado... ‚úç";

  fetch('/inspire', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ text: rawText })
  })
  .then(res => res.json())
  .then(data => {
    const formatted = (data.result || "‚ö†Ô∏è Nenhuma resposta da IA.")
      .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>') // **negrito**
      .replace(/\*(.*?)\*/g, '<em>$1</em>')             // *it√°lico*
      .replace(/\n/g, '<br>');                          // quebra de linha
    texto.innerHTML = formatted; // insere com formata√ß√£o HTML
  })
  .catch(err => {
    texto.innerText = "‚ö†Ô∏è Erro ao se conectar com a IA.";
    alert("Erro na IA: " + err);
  });
}


// INSPIRE 2 üëÅ‚Äçüó®‚ÄçüëÅ‚Äçüó®‚Äç ************************************************************************************************************
function inspirarComFlavia2() { 
  const sentenceGroups = document.querySelectorAll(".sentence-group");
  const textArray = [];

  if (sentenceGroups.length === 0) {
    alert("‚ö†Ô∏è Primeiro numere o texto antes de inspirar.");
    return;
  }

  sentenceGroups.forEach(group => {
    const number = group.querySelector(".number-marker")?.innerText.trim();
    const text = group.querySelector(".text-group")?.innerText.trim();
    if (number && text) {
      textArray.push(`${number} >\n${text}`);
    }
  });

  if (textArray.length === 0) {
    alert("‚ö†Ô∏è Nenhum bloco numerado foi encontrado. Numere o texto primeiro.");
    return;
  }

  const fullText = textArray.join("\n\n");

  // üîÑ Mostra a lousa e coloca t√≠tulo e mensagem tempor√°ria
  const lousa = document.getElementById("inspiracao-lousa");
  const titulo = lousa.querySelector("strong");
  const texto = document.getElementById("inspiracao-texto");

  lousa.style.display = "block";
  titulo.innerText = "üí° Reflex√£o da Fl√°via:";
  texto.innerText = "üí° Gerando Reflex√£o com alma viva... ‚úç";

  fetch('/inspire2', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ text: fullText })
  })
  .then(res => res.json())
  .then(data => {
    texto.innerText = data.result || "‚ö†Ô∏è Nenhuma resposta da IA.";
  })
  .catch(err => {
    texto.innerText = "‚ö†Ô∏è Erro ao se conectar com a IA.";
    alert("Erro na IA: " + err);
  });
}

// INSPIRE 3 üëÅ‚Äçüó®‚ÄçüëÅ‚Äçüó®‚Äç‚ÄçüëÅ‚Äçüó® *************************************************************************************************************
function inspirarComFlavia3() { 
  const sentenceGroups = document.querySelectorAll(".sentence-group");
  const textArray = [];

  if (sentenceGroups.length === 0) {
    alert("‚ö†Ô∏è Primeiro numere o texto antes de inspirar.");
    return;
  }

  sentenceGroups.forEach(group => {
    const number = group.querySelector(".number-marker")?.innerText.trim();
    const text = group.querySelector(".text-group")?.innerText.trim();
    if (number && text) {
      textArray.push(`${number} >\n${text}`);
    }
  });

  if (textArray.length === 0) {
    alert("‚ö†Ô∏è Nenhum bloco numerado foi encontrado. Numere o texto primeiro.");
    return;
  }

  const fullText = textArray.join("\n\n");

  // üîÑ Mostra a lousa e coloca t√≠tulo e mensagem tempor√°ria
  const lousa = document.getElementById("inspiracao-lousa");
  const titulo = lousa.querySelector("strong");
  const texto = document.getElementById("inspiracao-texto");

  lousa.style.display = "block";
  titulo.innerText = "üë∏ Leitora Virtual üìñ:";
  texto.innerText = "üë∏ Gerando leitura da Fl√°via... üìñ";

  fetch('/inspire3', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ text: fullText })
  })
  .then(res => res.json())
  .then(data => {
    texto.innerText = data.result || "‚ö†Ô∏è Nenhuma resposta da IA.";
  })
  .catch(err => {
    texto.innerText = "‚ö†Ô∏è Erro ao se conectar com a IA.";
    alert("Erro na IA: " + err);
  });
}

// üìù GERAR RASCUNHO ‚Äî garante que envia temperature e chama a rota certa
async function gerarRascunho(temperaturaEscolhida){
  const editor = document.getElementById("editor");
  const textoOriginal = editor.innerText.trim();

  const feedbackDiv = document.getElementById("simbol-feedback");
  if (feedbackDiv) feedbackDiv.innerHTML = '<span style="color:#001f3f;">üìÉ Gerando rascunho... </span>';

  if (!textoOriginal) {
    alert("‚ö†Ô∏è O editor est√° vazio.");
    if (feedbackDiv) feedbackDiv.innerHTML = '';
    return;
  }

  const temperatura = (typeof temperaturaEscolhida === 'number') ? temperaturaEscolhida : 0.85;

  try {
    const resposta = await fetch("/rascunho", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ texto: textoOriginal, temperature: temperatura })
    });

    const dados = await resposta.json();
    if (dados.erro) throw new Error(dados.erro);

    const rascunho = (dados.rascunho || '').trim();

    const rascunhoConvertido = rascunho
      .replace(/\*\*(.*?)\*\*/g, "<strong>$1</strong>")
      .replace(/\*(.*?)\*/g, "<em>$1</em>")
      .replace(/_(.*?)_/g, "<em>$1</em>")
      .replace(/\n/g, "<br>");

    editor.innerHTML = `
      <div class="sentence-group">
        <span class="number-marker">üìú</span>
        <span class="text-group" contenteditable="true">${rascunhoConvertido}</span>
      </div>
    `;

    if (feedbackDiv) {
      feedbackDiv.innerHTML = '<span style="color:green;">‚úîÔ∏è Rascunho gerado!</span>';
      setTimeout(()=> feedbackDiv.innerHTML = '', 2000);
    }
  } catch (erro) {
    console.error("Erro ao gerar rascunho:", erro);
    alert("Erro ao gerar rascunho.");
    if (feedbackDiv) feedbackDiv.innerHTML = '<span style="color:red;">‚ùå Erro ao gerar rascunho.</span>';
  }
}

// üîó exp√µe a callback que a plaquinha chama
window.enviarRascunho = function(temp){ gerarRascunho(temp); };

  
// ‚úÖ CORRETOR DE TEXTO ‚úÖ ************************************************************************************************************
async function corrigirTexto() {
  const editor = document.getElementById("editor");
  const textoOriginal = editor.innerText.trim();

  // ‚ú® Mostra carregamento visual com azul marinho
  const feedbackDiv = document.getElementById("simbol-feedback");
  if (feedbackDiv) {
    feedbackDiv.innerHTML = '<span style="color:#001f3f;">‚è≥ Corrigindo erros... </span>';
  }

  if (!textoOriginal) {
    alert("‚ö†Ô∏è O editor est√° vazio.");
    return;
  }

  try {
    const resposta = await fetch("/corrigir", {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify({ texto: textoOriginal })
    });

    const dados = await resposta.json();

    if (dados.erro) {
      throw new Error(dados.erro);
    }

    const textoCorrigido = dados.corrigido.trim();

    // ‚úÖ CONVERS√ÉO DE **markdown** PARA HTML
    const htmlCorrigido = textoCorrigido
      .replace(/\*\*(.*?)\*\*/g, "<strong>$1</strong>") // **negrito**
      .replace(/\*(.*?)\*/g, "<em>$1</em>")             // *it√°lico*
      .replace(/_(.*?)_/g, "<em>$1</em>")               // _it√°lico_
      .replace(/\n/g, "<br>");                          // quebra de linha

    editor.innerHTML = `
      <div class="sentence-group">
        <span class="number-marker">‚úÖ</span>
        <span class="text-group" contenteditable="true">${htmlCorrigido}</span>
      </div>
    `;

    // ‚úÖ Limpa o feedback ap√≥s aplicar corre√ß√£o
    if (feedbackDiv) {
      feedbackDiv.innerHTML = '<span style="color:green;">‚úîÔ∏è Texto corrigido!</span>';
      setTimeout(() => {
        feedbackDiv.innerHTML = '';
      }, 2000); // ‚è±Ô∏è Limpa ap√≥s 2 segundos
    }

  } catch (erro) {
    console.error("Erro ao corrigir texto:", erro);
    alert("Erro ao corrigir texto.");

    if (feedbackDiv) {
      feedbackDiv.innerHTML = '<span style="color:red;">‚ùå Erro ao corrigir texto.</span>';
    }
  }
}

// üåì¬Æ CORRETOR DE TEXTO 2 üåì¬Æ ************************************************************************************************************
// ==== SUA FUN√á√ÉO EXISTENTE, agora aceitando a temp escolhida ====
async function corrigirTexto2(temperaturaEscolhida){
  const editor = document.getElementById("editor");
  const textoOriginal = editor.innerText.trim();

  // usa a temp que veio da plaquinha; se n√£o vier, fallback 0.99
  const temperatura = (typeof temperaturaEscolhida === 'number') ? temperaturaEscolhida : 0.99;

  const feedbackDiv = document.getElementById("simbol-feedback");
  if (feedbackDiv) feedbackDiv.innerHTML = '<span style="color:#001f3f;">üåô Melhorando seu texto... </span>';

  if (!textoOriginal) {
    alert("‚ö†Ô∏è O editor est√° vazio.");
    return;
  }

  try {
    const resposta = await fetch("/corrigir2", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ texto: textoOriginal, temperature: temperatura })
    });

    const dados = await resposta.json();
    if (dados.erro) throw new Error(dados.erro);

    const textoCorrigido = (dados.corrigido || "").trim();

    const htmlCorrigido = textoCorrigido
      .replace(/\*\*(.*?)\*\*/g, "<strong>$1</strong>")
      .replace(/\*(.*?)\*/g, "<em>$1</em>")
      .replace(/_(.*?)_/g, "<em>$1</em>")
      .replace(/\n/g, "<br>");

    editor.innerHTML = `
      <div class="sentence-group">
        <span class="number-marker">üåì¬Æ</span>
        <span class="text-group" contenteditable="true">${htmlCorrigido}</span>
      </div>
    `;

    if (feedbackDiv) {
      feedbackDiv.innerHTML = '<span style="color:green;">‚úîÔ∏è Texto corrigido!</span>';
      setTimeout(() => feedbackDiv.innerHTML = '', 2000);
    }
  } catch (erro) {
    console.error("Erro ao corrigir texto:", erro);
    alert("Erro ao corrigir texto.");
    if (feedbackDiv) feedbackDiv.innerHTML = '<span style="color:red;">‚ùå Erro ao corrigir texto.</span>';
  }
}
window.corrigirTexto2 = corrigirTexto2;





// ALTERNADOR 3.5 PARA 4.0

// üåê Modelo inicial ********************************************************************************************
// üåê Modelo inicial ********************************************************************************************
let modeloAtual = "4.0"; // ‚úÖ Come√ßa em 4.0 direto!

// üéõ Alternador de modelo com bot√£o "üîº"
const botaoToggle = document.getElementById("botao-toggle-modelo");
const botaoPrincipal = document.getElementById("botao-pedido");

botaoToggle.addEventListener("click", () => {
  if (modeloAtual === "3.5") {
    modeloAtual = "4.0";
    botaoPrincipal.innerText = "üîÆ pedido‚Ñ¢";
    botaoToggle.classList.add("girado");
  } else {
    modeloAtual = "3.5";
    botaoPrincipal.innerText = "üìò pedido 3.5";
    botaoToggle.classList.remove("girado");
  }
});

// ‚úÖ Garante que o bot√£o j√° apare√ßa certo ao carregar
botaoPrincipal.innerText = "üîÆ pedido‚Ñ¢";
botaoToggle.classList.add("girado");

// DO...>> üíª TAREFA LIGRE üíª ************************************************************************************************************
async function gerarTarefa() {
  const editor = document.getElementById("editor");
  const textoOriginal = editor.innerText.trim();

  // ‚ú® Mostra carregamento visual com azul marinho
  const feedbackDiv = document.getElementById("simbol-feedback");
  if (feedbackDiv) {
    feedbackDiv.innerHTML = '<span style="color:#001f3f;">‚è≥ gerando tarefa... </span>';
  }

  if (!textoOriginal) {
    alert("‚ö†Ô∏è O editor est√° vazio.");
    return;
  }

  try {
    const resposta = await fetch("/tarefa", {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      // ‚úÖ envia tamb√©m o modelo (3.5 ou 4.0)
      body: JSON.stringify({ 
        texto: textoOriginal,
        modelo: modeloAtual 
      })
    });

    const dados = await resposta.json();

    if (dados.erro) {
      throw new Error(dados.erro);
    }

    const textoCorrigido = dados.corrigido.trim();

    // ‚úÖ CONVERS√ÉO DE **markdown** PARA HTML
    const htmlCorrigido = textoCorrigido
      .replace(/\*\*(.*?)\*\*/g, "<strong>$1</strong>") // **negrito**
      .replace(/\*(.*?)\*/g, "<em>$1</em>")             // *it√°lico*
      .replace(/_(.*?)_/g, "<em>$1</em>")               // _it√°lico_
      .replace(/\n/g, "<br>");                          // quebra de linha

    editor.innerHTML = `
      <div class="sentence-group">
        <span class="number-marker">üíª</span>
        <span class="text-group" contenteditable="true">${htmlCorrigido}</span>
      </div>
    `;

    // ‚úÖ Limpa o feedback ap√≥s aplicar corre√ß√£o
    if (feedbackDiv) {
      feedbackDiv.innerHTML = '<span style="color:green;">‚úîÔ∏è Conclu√≠do!</span>';
      setTimeout(() => {
        feedbackDiv.innerHTML = '';
      }, 2000); // ‚è±Ô∏è Limpa ap√≥s 2 segundos
    }

  } catch (erro) {
    console.error("Erro ao corrigir texto:", erro);
    alert("Erro ao corrigir texto.");

    if (feedbackDiv) {
      feedbackDiv.innerHTML = '<span style="color:red;">‚ùå Erro ao corrigir texto.</span>';
    }
  }
}

// üåæ ROTA DICAS SIMB√ìLICAS üåæ **********************************************************************
function executarSimbolProcess() {
  const editor = document.getElementById("editor");
  const sentenceGroups = editor.querySelectorAll(".sentence-group");
  const textArray = [];

  const feedbackDiv = document.getElementById("simbol-feedback");
  if (feedbackDiv) {
    feedbackDiv.innerHTML = '<span style="color:#884488;">‚è≥ Gerando sugest√µes simb√≥licas... üåæ</span>';
  }

  sentenceGroups.forEach(group => {
    const numero = group.querySelector(".number-marker")?.innerText.trim().match(/\d+/)?.[0];
    const texto = group.querySelector(".text-group")?.innerText.trim();
    if (numero && texto) {
      textArray.push(`${numero}\n${texto}`);
    }
  });

  const fullText = textArray.join("\n\n");

  fetch('/simbolprocess', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ text: fullText })
  })
  .then(res => res.json())
  .then(data => {
    const resposta = data.result || '';
    if (!resposta.trim()) {
      alert("‚ö†Ô∏è Nenhuma sugest√£o simb√≥lica recebida.");
      return;
    }

    // Aceita üåæ antes OU depois do n√∫mero (ex: üåæ 42¬∞ ou 42¬∞üåæ)
    const blocos = resposta.split(/(?=üåæ\s*\d+¬∞?\s*\*\*\[)/g);
    const sugestoes = {};

    blocos.forEach(bloco => {
      try {
        const numeroMatch = bloco.match(/(\d+)\s*¬∞?\s*üåæ|\s*üåæ\s*(\d+)/);
        const numero = numeroMatch ? parseInt(numeroMatch[1] || numeroMatch[2]) : null;
        if (numero) {
          // Aplicar Markdown:
          const sugestaoComHTML = bloco
            .replace(/\*\*(.*?)\*\*/g, "<strong>$1</strong>") // **negrito**
            .replace(/\*(.*?)\*/g, "<em>$1</em>")             // *it√°lico*
            .replace(/_(.*?)_/g, "<em>$1</em>")               // _it√°lico_
            .replace(/\n/g, "<br>");                          // quebra de linha

          sugestoes[numero] = sugestaoComHTML.trim();
        }
      } catch (e) {
        console.warn("Erro ao processar bloco simb√≥lico:", bloco, e);
      }
    });

    sentenceGroups.forEach(group => {
      const numeroTexto = group.querySelector(".number-marker")?.innerText.trim().match(/\d+/)?.[0];
      const numero = parseInt(numeroTexto);
      const sugestao = sugestoes[numero];

      if (sugestao) {
        const idMarcacao = `marcacao-${Date.now()}-${numero}`;
        const span = document.createElement("span");
        span.innerHTML = `
          <span class="processed-comment-scriptus marcacao-com-fechar" id="${idMarcacao}">
            ${sugestao}
            <button class="marcacao-fechar" onclick="removerMarcacao('${idMarcacao}')">‚úñ</button>
          </span>
        `;

        const textGroup = group.querySelector(".text-group");
        if (textGroup) {
          textGroup.appendChild(span);
        }
      }
    });

    if (feedbackDiv) {
      feedbackDiv.innerHTML = '<span style="color:green;">‚úîÔ∏è Sugest√µes simb√≥licas aplicadas!</span>';
      setTimeout(() => feedbackDiv.innerHTML = '', 2500);
    }
  })
  .catch(err => {
    if (feedbackDiv) feedbackDiv.innerHTML = '‚ùå Erro ao buscar sugest√µes.';
    alert("Erro ao buscar sugest√µes: " + err);
  });
}

// üé¨ CENAS üé¨ ************************************************************************************************************
function executarMarcadorDeCenas() {
  const sentenceGroups = document.querySelectorAll(".sentence-group");
  const textArray = [];

  // üîÅ Mostra carregando com alma viva
  const feedbackDiv = document.getElementById("simbol-feedback");
  if (feedbackDiv) {
    feedbackDiv.innerHTML = '<span style="color:#001f3f;">‚è≥ Gerando cenas... üé•</span>';
  }

  sentenceGroups.forEach(group => {
    const number = group.querySelector(".number-marker")?.innerText.trim();
    const text = group.querySelector(".text-group")?.innerText.trim();
    if (number && text) {
      textArray.push(`${number} ${text}`);
    }
  });

  const fullText = textArray.join("\n");

  fetch('/marcar-cenas', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ text: fullText })
  })
    .then(res => res.json())
    .then(data => {
      const cenasStr = data.cenas || '';
      const linhas = cenasStr.split('\n');

      // üßΩ Remove apenas marca√ß√µes anteriores de cena
      document.querySelectorAll(".scene-marker").forEach(el => el.remove());

      linhas.forEach((linha, i) => {
        const match = linha.match(/\{üé¨ #\d+ (.*?)\} \/ (\d+)/);
        if (match) {
          const titulo = match[0];
          const blocoNum = parseInt(match[2]);
          const idCena = `cena-${Date.now() + i}`;

          const targetGroup = Array.from(document.querySelectorAll('.sentence-group'))[blocoNum - 1];
          if (targetGroup) {
            const cenaDiv = document.createElement('div');
            cenaDiv.innerHTML = `
              <span class="scene-marker marcacao-com-fechar" id="${idCena}">
                ${titulo}
                <button class="marcacao-fechar" onclick="removerMarcacao('${idCena}')">‚úñ</button>
              </span>
            `;
            targetGroup.appendChild(cenaDiv);
          }
        }
      });

      // ‚úÖ Limpa o feedback ap√≥s aplicar as cenas
      if (feedbackDiv) {
        feedbackDiv.innerHTML = '<span style="color:green;">‚úîÔ∏è Cenas aplicadas!</span>';
        setTimeout(() => {
          feedbackDiv.innerHTML = '';
        }, 1000);
      }
    })
    .catch(err => {
      if (feedbackDiv) {
        feedbackDiv.innerHTML = '‚ùå Erro ao marcar cenas.';
      }
      alert("Erro ao marcar cenas: " + err);
    });
}

// üö® FLUIDEZ üö® ******************************************************************************************************
function analyzeFluidezIA() {
  const editor = document.getElementById("editor");
  const sentenceGroups = editor.querySelectorAll(".sentence-group");
  const textArray = [];

  // ‚ú® Mostra carregamento visual com azul marinho
  const feedbackDiv = document.getElementById("simbol-feedback");
  if (feedbackDiv) {
    feedbackDiv.innerHTML = '<span style="color:#001f3f;">‚è≥ Analisando fluidez... üö®</span>';
  }

  sentenceGroups.forEach(group => {
    const number = group.querySelector(".number-marker")?.innerText.trim();
    const text = group.querySelector(".text-group")?.innerText.trim();
    if (number && text) {
      textArray.push(`${number}\n${text}`);
    }
  });

  const fullText = textArray.join("\n\n");

  fetch('/fluidez', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ text: fullText })
  })
  .then(res => res.json())
  .then(data => {
    const resposta = data.result || '';
    if (!resposta.trim()) {
      alert("‚ö†Ô∏è Nenhuma sugest√£o de fluidez recebida.");
      return;
    }

    const linhas = resposta.split('\n');
    const sugestoes = {};

    linhas.forEach(linha => {
      const match = linha.match(/n¬∞\s*(\d+)/);
      if (match) {
        const numero = parseInt(match[1]);
        sugestoes[numero] = linha.trim();
      }
    });

    sentenceGroups.forEach((group, i) => {
      const numero = i + 1;
      const sugestao = sugestoes[numero];

      if (sugestao) {
        const idMarcacao = `marcacao-${numero}-${Math.random().toString(36).substr(2, 6)}`;
        const span = document.createElement("span");
        const sugestaoHTML = sugestao
          .replace(/\*\*(.*?)\*\*/g, "<strong>$1</strong>") // **negrito**
          .replace(/\*(.*?)\*/g, "<em>$1</em>")             // *it√°lico*
          .replace(/_(.*?)_/g, "<em>$1</em>")               // _it√°lico_
          .replace(/\n/g, "<br>");                          // quebra de linha

        span.innerHTML = `
          <span class="processed-symbol marcacao-com-fechar" id="${idMarcacao}">
            ${sugestaoHTML}
            <button class="marcacao-fechar" onclick="removerMarcacao('${idMarcacao}')">‚úñ</button>
          </span>
        `;

        const textGroup = group.querySelector(".text-group");
        if (textGroup) {
    textGroup.appendChild(span);
  }
}
    });

    // ‚úÖ Finaliza com mensagem visual tempor√°ria
    if (feedbackDiv) {
      feedbackDiv.innerHTML = '<span style="color:green;">‚úîÔ∏è An√°lise de fluidez conclu√≠da!</span>';
      setTimeout(() => {
        feedbackDiv.innerHTML = '';
      }, 2000);
    }
  })
  .catch(err => {
    if (feedbackDiv) {
      feedbackDiv.innerHTML = '‚ùå Erro ao analisar fluidez.';
    }
    alert("Erro ao analisar fluidez: " + err);
  });
}

// üçÇ DICAS POR BLOCO üçÇ ******************************************************************************************************
function analisarDicasIA() {
  const editor = document.getElementById("editor");
  const sentenceGroups = editor.querySelectorAll(".sentence-group");
  const textArray = [];

  // üåº Feedback visual inicial
  const feedbackDiv = document.getElementById("simbol-feedback");
  if (feedbackDiv) {
    feedbackDiv.innerHTML = '<span style="color:#884488;">‚è≥ Gerando dicas por bloco... üçÇ</span>';
  }

  sentenceGroups.forEach(group => {
    const number = group.querySelector(".number-marker")?.innerText.trim();
    const text = group.querySelector(".text-group")?.innerText.trim();
    if (number && text) {
      textArray.push(`${number}\n${text}`);
    }
  });

  const fullText = textArray.join("\n\n");

  fetch('/dicas-blocos', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ text: fullText })
  })
  .then(res => res.json())
  .then(data => {
    const resposta = data.result || '';
    if (!resposta.trim()) {
      alert("‚ö†Ô∏è Nenhuma dica recebida.");
      return;
    }

    const linhas = resposta.split('\n');
    const sugestoes = {};

    linhas.forEach(linha => {
      // tenta v√°rios formatos: "3 ‚Ä¶", "3¬∞ ‚Ä¶", "N√öMERO 3 ‚Ä¶", "NUMERO 3 ‚Ä¶", "N¬∫ 3 ‚Ä¶"
      const m =
        linha.match(/^\s*(\d+)\s*[¬∞¬∫.]?\s/) ||
        linha.match(/^\s*(?:N[√öU]?MERO|N¬∫)\s*(\d+)\s*/i);

      if (!m) return;

      const numero = parseInt(m[1] || m[2], 10);
      if (!Number.isNaN(numero)) {
        // opcional: remova o prefixo capturado para exibir s√≥ o texto
        const linhaSemPrefixo = linha.replace(m[0], '').trim();
        sugestoes[numero] = linhaSemPrefixo;
      }
    });

    sentenceGroups.forEach((group, i) => {
      const numero = i + 1;
      const sugestao = sugestoes[numero];

      if (sugestao) {
        const idMarcacao = `marcacao-${numero}-${Math.random().toString(36).substr(2, 6)}`;
        const span = document.createElement("span");
        const sugestaoHTML = sugestao
          .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')   // **negrito**
          .replace(/\*(.*?)\*/g, '<em>$1</em>')               // *it√°lico*
          .replace(/\n/g, '<br>');                            // quebra de linha

        span.innerHTML = `
          <span class="processed-comment marcacao-com-fechar" id="${idMarcacao}">
            ${sugestaoHTML}
            <button class="marcacao-fechar" onclick="removerMarcacao('${idMarcacao}')">‚úñ</button>
          </span>
        `;

        const textGroup = group.querySelector(".text-group");
        if (textGroup) {
    textGroup.appendChild(span);
  }
}
    });

    // ‚úÖ Feedback final
    if (feedbackDiv) {
      feedbackDiv.innerHTML = '<span style="color:green;">‚úîÔ∏è Dicas aplicadas com sucesso!</span>';
      setTimeout(() => {
        feedbackDiv.innerHTML = '';
      }, 2000);
    }
  })
  .catch(err => {
    if (feedbackDiv) {
      feedbackDiv.innerHTML = '‚ùå Erro ao buscar dicas.';
    }
    alert("Erro ao buscar dicas: " + err);
  });
}

// ‚úÖ PLACA TEMPERATURA *************************************************************************************************************************
// ‚úÖ Plaquinha unificada: sempre salva a FUN√á√ÉO, n√£o o nome
window._callbackTemperatura = null;

function placaAtualizarTemp(v){
  const el = document.getElementById('placaTempLabel');
  if (el) el.textContent = Number(v).toFixed(2);
}

// agora aceita: abrirPlacaTemperatura(this, corrigirTexto2, 0.99)  OU  abrirPlacaTemperatura(this, 'corrigirTexto2', 0.99)
function abrirPlacaTemperatura(btn, cb, defaultTemp){
  if (typeof cb === 'function') {
    window._callbackTemperatura = cb;
  } else if (typeof cb === 'string' && typeof window[cb] === 'function') {
    window._callbackTemperatura = window[cb];
  } else {
    window._callbackTemperatura = null;
  }

  const placa  = document.getElementById('placaTemperatura');
  const slider = document.getElementById('placaTempSlider');
  const label  = document.getElementById('placaTempLabel');
  if (!placa) return;

  // default opcional por bot√£o (ex.: 0.99 pro revisor, 0.85 pro rascunho)
  if (slider && label && typeof defaultTemp === 'number') {
    slider.value = defaultTemp;
    label.textContent = defaultTemp.toFixed(2);
  }

  placa.style.display = 'block';
  requestAnimationFrame(() => {
    const r = btn.getBoundingClientRect(), pad = 10, w = placa.offsetWidth || 300;
    let left = r.left + (r.width/2) - (w/2);
    left = Math.max(16, Math.min(left, window.innerWidth - w - 16));
    placa.style.left = left + 'px';
    placa.style.top  = (r.bottom + pad) + 'px';
  });
}

function fecharPlacaTemperatura(){
  const placa = document.getElementById('placaTemperatura');
  if (placa) placa.style.display = 'none';
}

function confirmarTemperatura(){
  const s = document.getElementById('placaTempSlider');
  const temp = s ? parseFloat(s.value) : 0.9;
  fecharPlacaTemperatura();

  if (typeof window._callbackTemperatura === 'function') {
    window._callbackTemperatura(temp);
  } else {
    alert("Callback de temperatura n√£o definida. Verifique o 'onclick' do bot√£o.");
  }
  window._callbackTemperatura = null;
}