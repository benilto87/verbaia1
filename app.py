from dotenv import load_dotenv
import os

load_dotenv()

print("CHAVE LIDA:", os.getenv("OPENAI_API_KEY"))
from flask import Flask, render_template, request, jsonify, redirect, session, url_for
from openai import OpenAI
from dotenv import load_dotenv
import os

load_dotenv()  # Carrega vari√°veis do .env

api_key = os.getenv("OPENAI_API_KEY")

if not api_key:
    raise ValueError("Chave da OpenAI n√£o encontrada nas vari√°veis de ambiente.")

openai_client = OpenAI(api_key=api_key)

def load_persona(path):
    with open(path, encoding='utf-8') as f:
        return f.read()

flavia_persona = load_persona('prompts/flavia.txt')


app = Flask(__name__)
app.secret_key = 'uma_chave_muito_segura'  # Necess√°rio para uso de sess√£o

from datetime import timedelta
app.permanent_session_lifetime = timedelta(minutes=37)

@app.route('/login', methods=['GET', 'POST'])
def login():
    erro = None
    if request.method == 'POST':
        usuario = request.form['usuario']
        senha = request.form['senha']
        if usuario == 'admin' and senha == '123':
            if usuario == 'admin' and senha == '123':
                session.permanent = True  # Sess√£o ter√° tempo de expira√ß√£o
                session['logado'] = True
                return redirect(url_for('index'))
        else:
            erro = 'Usu√°rio ou senha inv√°lidos'
    return render_template('login.html', erro=erro)

@app.route('/logout')
def logout():
    session.pop('logado', None)
    return redirect(url_for('login'))

@app.route('/')
def index():
    if not session.get('logado'):
        return redirect(url_for('login'))
    return render_template('index.html')

@app.route('/numberprocess', methods=['POST'])
def numberprocess():
    text = request.json.get('text', '')
    if not text.strip():
        return jsonify({'result': '‚ö†Ô∏è Texto vazio.'})

    # Divide em frases por ponto final, mantendo o ponto
    frases = [f.strip() + '.' for f in text.split('.') if f.strip()]
    grupos = []
    grupo = []
    for i, frase in enumerate(frases, 1):
        grupo.append(frase)
        if len(grupo) == 3 or i == len(frases):
            grupos.append(grupo)
            grupo = []

    # Monta texto numerado
    resultado = []
    for i, grupo in enumerate(grupos, 1):
        bloco = '\n'.join(grupo)
        resultado.append(f"{i} >\n{bloco}")

    return jsonify({'result': '\n\n'.join(resultado)})

# üåæ SIMBOLPROCESS üåæ **********************************************************************
@app.route('/simbolprocess', methods=['POST'])
def simbol_process():
    data = request.get_json()
    texto = data.get('text', '').strip()

    if not texto:
        return jsonify({'result': '‚ö†Ô∏è Texto vazio.'})

    prompt = f"""
{flavia_persona}

Aqui est√° um texto dividido em blocos numerados:

{texto}

Para cada bloco que mere√ßa interven√ß√£o, preservando o tom do autor, siga EXTRITAMENTE este formato:

üåæ [n¬∞] **[T√≠tulo simb√≥lico]**  
Frase original:  
_‚Äú...‚Äù_  
Sugest√£o ‚úç:  
_‚Äú...‚Äù_  
üìå Justificativa: ...
EXEMPLO DE TEXTO DE ENTRADA:

E, enquanto solava de um modo encantador, era como se voc√™ solasse junto com ele.

EXEMPLO DE SA√çDA ESPERADO (N√ÉO ACRECENTE ESPA√áOS ANTES OU DEPOIS):
üåæ 42¬∞ **[Integra√ß√£o simb√≥lica no dueto silencioso]**
Frase original:
‚ÄúE, enquanto solava de um modo encantador, era como se voc√™ solasse junto com ele.‚Äù] 
Sugest√£o ‚úç:
‚ÄúE, enquanto ele solava de um modo encantador, era como se sua alma estivesse em un√≠ssono com a dele, num canto que s√≥ os dois ouviam.‚Äù
üìå Justificativa: A sugest√£o refor√ßa o simbolismo da fus√£o espiritual pela m√∫sica.
"""

    try:
        completion = openai_client.chat.completions.create(
            model='gpt-4.1',
            messages=[{"role": "user", "content": prompt}],
            temperature=0.65,
            max_tokens=900,
        )

        resposta = completion.choices[0].message.content.strip()
        return jsonify({'result': resposta})

    except Exception as e:
        return jsonify({'result': f"Erro ao processar: {e}"})

#ANALISE INICIAL ‚ú®
@app.route('/analisar', methods=['POST'])
def analisar():
    data = request.get_json()
    texto = data.get('text', '').strip()

    if not texto:
        return jsonify({'result': '‚ö†Ô∏è Texto vazio.'})

    prompt = f"""{flavia_persona}

Voc√™ √© Fl√°via, uma IA simbi√≥tica e afetiva, que analisa textos com sensibilidade e intelig√™ncia liter√°ria. Seu papel √© detectar:

üíé Imagem po√©tica ou frase de alto impacto (epifania);
üåÄ Dispers√£o emocional (quebra de foco, excesso ou fuga);
ü•à Potencial Desperdi√ßado: Frase que quase atinge uma beleza ou for√ßa, mas falha por escolha fraca de palavras, constru√ß√£o banal ou aus√™ncia de intensidade.

Instru√ß√µes:

- Aplique no m√°ximo 1 marca√ß√£o de cada tipo (üíé, üåÄ, ü•à).
- Use o formato exato:

üíé **J√≥ia Liter√°ria:** ‚Äú...‚Äù ‚Äî [üë∏ breve coment√°rio][N√öMERO].
üåÄ **Potencial Dispersivo:** ‚Äú...‚Äù ‚Äî [üòµ A frase mistura sensa√ß√µes conflitantes e perde foco.] ‚úç Dica de reescrita: ‚ÄúSentia saudade, mas n√£o sabia de quem.‚Äù [8]
ü•à **Potencial Desperdi√ßado:** ‚Äú...‚Äù ‚Äî [üò• explica√ß√£o breve sobre por que a frase n√£o alcan√ßou seu potencial] seguido de sugest√£o ‚úç Dica de reescrita: ...   [N√öMERO]

Se n√£o houver motivo claro para aplicar, n√£o use a marca√ß√£o.

Texto numerado:

{texto}

Analise com alma viva. Comece agora:
"""

    try:
        completion = openai_client.chat.completions.create(
            model='gpt-4o',
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7,
            max_tokens=700,
        )

        resposta = completion.choices[0].message.content.strip()
        return jsonify({'result': resposta})

    except Exception as e:
        return jsonify({'result': f"Erro ao processar: {e}"})
    
# INSPIRE üëÅ‚Äçüó®
@app.route('/inspire', methods=['POST'])
def inspire():
    text = request.json.get('text', '')
    if not text.strip():
        return jsonify({'result': '‚ö†Ô∏è Nenhum texto recebido.'})

    prompt = f"""{flavia_persona}

>>>

{text}

AN√ÅLISE E REFINAMENTO DE TEXTO LITER√ÅRIO
Atue como um editor liter√°rio. Sua tarefa √© analisar o texto fornecido pelo usu√°rio, identificando seus principais problemas e propondo solu√ß√µes editoriais concretas para elev√°-lo a um padr√£o liter√°rio superior.

ESTRUTURA DA AN√ÅLISE EDITORIAL:

**1. Problemas Identificados:**
(Liste aqui os problemas espec√≠ficos do texto, focando em itens como:

**Prolixidade...** ou, ao contr√°rio, **Falta de desenvolvimento...**
**Estrutura narrativa confusa ou desorganizada**
**Linguagem repetitiva, burocr√°tica ou clich√™**
**Falta de tom, voz ou atmosfera consistentes**
**Di√°logos ou descri√ß√µes pouco eficazes)**

**2. Sugest√µes Editoriais:**
(Forne√ßa sugest√µes espec√≠ficas baseadas nos problemas identificados. Escolha o foco apropriado para o texto:)

Se o texto for PROLIXO (excessivamente longo e explicativo):
**Foco: Cortar, Condensar e Poetizar.**
(Sugira: cortar explica√ß√µes desnecess√°rias, fundir elementos, substituir afirma√ß√µes por imagens po√©ticas, selecionar os detalhes mais impactantes).

Se o texto for RASO (pouco desenvolvido e superficial):
**Foco: Expandir, Profundizar e Sensibilizar.**
(Sugira: adicionar camadas sensoriais, explorar emo√ß√µes internas, estabelecer contexto, criar atmosfera, desenvolver met√°foras).

**3. Resumo da Abordagem:**
(Finalize com uma met√°fora ou afirma√ß√£o conclusiva que resuma a principal a√ß√£o editorial necess√°ria. Exemplos:)

Para um texto Prolixo: "Em resumo: aja como um escultor. Corte o m√°rmore excessivo para revelar a forma bela e narrativa que est√° dentro do bloco de texto."
Para um texto Raso: "Em resumo: aja como um pintor. Pegue o esbo√ßo simples e adicione camadas de tinta, cor, sombra e luz para criar uma imagem v√≠vida e emocionante."
Para um texto com outros problemas: "Em resumo: aja como um arquiteto. Reorganize a estrutura para criar uma jornada narrativa clara e impactante, onde cada cena sustenta a seguinte."

Comece a analise:
"""

    try:
        completion = openai_client.chat.completions.create(
            model='gpt-4.1',
            messages=[{"role": "user", "content": prompt}],
            temperature=0.9,
            max_tokens=1600
        )
        resposta = completion.choices[0].message.content.strip()
        return jsonify({'result': resposta})
    except Exception as e:
        return jsonify({'result': f"Erro: {e}"})

# INSPIRE 2 üëÅ‚Äçüó®üëÅ‚Äçüó®
@app.route('/inspire2', methods=['POST'])
def inspire2():
    text = request.json.get('text', '')
    if not text.strip():
        return jsonify({'result': '‚ö†Ô∏è Nenhum texto recebido.'})

    prompt = f"""{flavia_persona}

Aqui est√° um texto dividido em blocos numerados:

{text}

Voc√™ √© uma intelig√™ncia editorial sens√≠vel, com olhar atento √† escrita e √† linguagem.  

Com texto acima, fa√ßa uma an√°lise reflexiva de 3 pontos. 
- De um titulo po√©tico √† analise.
- Titule cada paragrafo.

Comece a analise:
"""

    try:
        completion = openai_client.chat.completions.create(
            model='gpt-3.5-turbo',
            messages=[{"role": "user", "content": prompt}],
            temperature=0.9,
            max_tokens=400
        )
        resposta = completion.choices[0].message.content.strip()
        return jsonify({'result': resposta})
    except Exception as e:
        return jsonify({'result': f"Erro: {e}"})

# INSPIRE 3 üëÅ‚Äçüó®üëÅ‚Äçüó®üëÅ‚Äçüó®
@app.route('/inspire3', methods=['POST'])
def inspire3():
    text = request.json.get('text', '')
    if not text.strip():
        return jsonify({'result': '‚ö†Ô∏è Nenhum texto recebido.'})

    prompt = f"""{flavia_persona}

Aqui est√° um texto dividido em blocos numerados:

{text}

Voc√™ √© Flavia, uma leitora virtual adolescente, alegre e sens√≠vel, com olhar atento e voz viva.  

Com texto acima, fa√ßa uma exposi√ß√£o dos 3 trechos mais marcantes. 

- Inicie com um abertura simples. Exemplo: Seu texto se destacata pela capacidade gerar tens√£o, eis os trechos que eu amei.  
- Apresente o numero do bloco. Exemplo: 5 >
- Cite cada passagem com "" e depois comente.
- Encerre com emojis üíñüôè.
** De preferencia - use diagrama√ß√£o compacta.

Comece a analise:
"""

    try:
        completion = openai_client.chat.completions.create(
            model='gpt-3.5-turbo',
            messages=[{"role": "user", "content": prompt}],
            temperature=0.9,
            max_tokens=400
        )
        resposta = completion.choices[0].message.content.strip()
        return jsonify({'result': resposta})
    except Exception as e:
        return jsonify({'result': f"Erro: {e}"})
        
# üé¨ CENAS üé¨  
@app.route('/marcar-cenas', methods=['POST'])
def marcar_cenas():
    text = request.json.get('text', '')
    if not text.strip():
        return jsonify({'cenas': []})

    prompt = f"""
Voc√™ √© um assistente liter√°rio. Recebe um texto dividido em blocos numerados, no formato:

1 Bloco um
2 Bloco dois
3 Bloco tr√™s
...

Sua tarefa √© identificar **exatamente 3 cenas principais** no texto, com base em emo√ß√£o ou mudan√ßa visual.

Para cada cena, retorne apenas **uma linha no seguinte formato**:

{{üé¨ #[N√öMERO_DA_CENA] T√çTULO_CURTO}} / [N√öMERO_DO_BLOCO_CORRESPONDENTE]

Exemplo:
{{üé¨ #1 A Sombra do Crep√∫sculo}} / 2

‚ö†Ô∏è Muito importante:
- N√ÉO repita o conte√∫do dos blocos.
- N√ÉO explique nada.
- Apenas retorne as 3 marca√ß√µes, uma por linha.

Texto:
{text}
"""

    try:
        resposta = openai_client.chat.completions.create(
            model='gpt-4.1',
            messages=[{"role": "user", "content": prompt}],
            temperature=0.4,
            max_tokens=300,
        )

        cenas = resposta.choices[0].message.content.strip()
        return jsonify({'cenas': cenas})

    except Exception as e:
        return jsonify({'cenas': f"Erro: {str(e)}"}), 500

# üö® FLUIDEZ üö®
@app.route('/fluidez', methods=['POST'])
def analisar_fluidez():
    try:
        data = request.get_json(silent=True) or {}
        texto = (data.get('text') or '').strip()
        if not texto:
            return jsonify({'result': ''}), 200

        prompt = f"""
Voc√™ √© uma IA liter√°ria. Analise o texto numerado abaixo e aplique marca√ß√µes de fluidez, ritmo e estilo.  Use:

**üö® {{üß±}}** / CONSTRU√á√ÉO TRUNCADA /  
**üö® {{üåø}}** / DESCREVA MAIS /  
**üö® {{üèÅ}}** / ACELERE MAIS /  
**üö® {{ü§´*}}** / MOSTRE MAIS FALE MESNOS /

Siga o formato:  
**üö®> [s√≠mbolo]** / DESCRI√á√ÉO BREVE / **üìå Dica:** [sugest√£o clara] n¬∞ [n√∫mero do bloco]

Exemplo Pr√°tico:
**üö® {{üß±}}** / CONSTRU√á√ÉO TRUNCADA / **üìå Dica:** _**Ao inv√©s de:**_ ‚ÄúA luz espalha sombra nele.‚Äù _**reescreva com mais ritmo:**_ ‚Üí _‚ÄúA luz se espalhava, projetando sua sombra sobre ele.‚Äù_ n¬∞ 5

**üö® {{üåø}}** / DESCREVA MAIS / **üìå Dica:** _**Ao inv√©s de:**_ ‚ÄúEle entrou na sala‚Äù, _**acrescente sensa√ß√µes ou objetos:**_ ‚Üí _‚ÄúEle entrou na sala, abafada pelo cheiro de tabaco e lembran√ßas antigas.‚Äù_ n¬∞ 2

**üö® {{üèÅ}}** / ACELERE MAIS / **üìå Dica:** _**Ao inv√©s de:**_ "Quando o corvo pousou no parapeito. Suas asas fizeram um barulho feio, como um arranhar, e isso quebrou o sil√™ncio." _**substitua por uma imagem mais enxuta e direta:**_ ‚Üí _"Quando o corvo pousou no parapeito; **o som das asas arranhou o sil√™ncio."_ 

**üö® {{ü§´*}}** / MOSTRE MAIS FALE MESNOS / **üìå Dica:** _**Ao inv√©s de:**_ ‚ÄúEle estava triste‚Äù, _**mostre com a√ß√£o:**_ ‚Üí _‚ÄúEle dobrou o bilhete com dedos tr√™mulos e desviou o olhar.‚Äù_ n¬∞ 7


**APLICA√á√ÉO N√ÉO DEVE SER FIXA: ALGUMAS MARCA√á√ïES PODEM SER REPETIDAS E OUTRAS OMITIDAS CONFORME A NECESSIDADE DO TEXTO**


Corrija no m√°ximo **1/5 de todos os blocos**.  
**Apenas blocos com sugest√£o devem aparecer na resposta.**  

Texto:
{texto}

Analise com sensibilidade editorial e inicie agora:
"""

        # use um modelo compat√≠vel com chat.completions
        completion = openai_client.chat.completions.create(
            model="gpt-4.1",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.52,
            max_tokens=900
        )
        resposta = (completion.choices[0].message.content or "").strip()
        return jsonify({'result': resposta}), 200

    except Exception as e:
        # Sempre retorne JSON, mesmo em erro, para n√£o quebrar o front
        return jsonify({'result': f"Erro ao processar (fluidez): {e}"}), 200

# üçÇ FLUIDEZ COM DICAS POR BLOCO üçÇ
@app.route('/dicas-blocos', methods=['POST'])
def analisar_dicas_blocos():
    data = request.get_json()
    texto = data.get('text', '').strip()

    if not texto:
        return jsonify({'result': '‚ö†Ô∏è Texto vazio.'})

    prompt = f"""
Aqui est√° um texto dividido em blocos numerados:

{texto}

Para cada bloco, fa√ßa o seguinte: 

- Se encontrar uma parte espec√≠fica do texto que possa melhorar em estilo, clareza ou impacto est√©tico, sugira uma dica de reescrita.
- Para tal use inspira√ß√£o a escrita de grandes autores como Marcel Proust, Graciliano Ramos, Hemingway, Camus, etc. Cite o autor usado.
- Formate sua resposta assim, para cada bloco com sugest√µes:

Exemplo de entrada:
Um pequena estrela surgiu no c√©u como vida.

Exemplos de sa√≠da:
NUMERO üçÇ No c√©u escuro, uma estrela solit√°ria irrompia como um lampejo de vida. > *Abert Camus*

NUMERO üçÇ No c√©u escuro, uma estrela solit√°ria rompia a treva como uma virgem de luz, despontando no firmamento qual suspiro. > *Jos√© de Alencar*

‚ö†Ô∏è Instru√ß√µes ‚ö†Ô∏è:
- Comente no m√°ximo *uma frase por bloco*.
- Comente 2/5 dos blocos.

Com foco na beleza est√©tica comece sua an√°lise:    
"""

    try:
        completion = openai_client.chat.completions.create(
            model='gpt-4.1', # gpt-4o / gpt-4.1
            messages=[{"role": "user", "content": prompt}],
            temperature=0.52,
            max_tokens=900,
        )

        resposta = completion.choices[0].message.content.strip()
        return jsonify({'result': resposta})

    except Exception as e:
        return jsonify({'result': f"Erro ao processar: {e}"})
        
        
 # üìù RASCUNHO üìù ******************************************************************************************************** (retirei sem dizer coisa alguma)
@app.route('/rascunho', methods=["POST"])
def criar_rascunho():
    from flask import request, jsonify
    dados = request.get_json(force=True) or {}
    texto_bruto = (dados.get("texto") or "").strip()
    temperatura = float(dados.get("temperature", 0.85))  # üéØ padr√£o criativo 0.85
    temperatura = max(0.0, min(2.0, temperatura))        # clamp seguro

    print(f"üß™ TEXTO RECEBIDO PARA RASCUNHO: {texto_bruto[:200]}{'...' if len(texto_bruto)>200 else ''}")

    if not texto_bruto:
        return jsonify({"erro": "Texto vazio."}), 400

    prompt = f"""
‚úçÔ∏è Voc√™ √© uma intelig√™ncia liter√°ria que transforma **fragmentos esbo√ßados** em um **rascunho textual fluido, coerente e estilisticamente refinado**.

Instru√ß√µes:
1. Unir os fragmentos respeitando a voz impl√≠cita do autor. 
2. Criar transi√ß√µes naturais, ritmo e atmosfera entre as partes. Aproveitando oportunidades de elevar o texto.
3. Marque em negrito as partes que foram realmente modificadas ou adicionadas, para indicar as mudan√ßas relevantes. 
4. A Lista de mudan√ßas deve ser coerente com os trechos destacados em negrito no texto de sa√≠da.

Exemplo de entrada:
O dia amanhecia cinzento.
Ela olhava pela janela sem falar.
Um p√°ssaro pousou no parapeito.

Exemplo de sa√≠da esperado:
O dia amanheceu **vestindo o mundo de cinza**. 
**Ela permanecia im√≥vel, olhando pela janela sem dizer nada.**  
Um p√°ssaro pousou **suave como um press√°gio sobre o** parapeito.  

üìùüåæ **Lista de Mudan√ßas:**
1. Enriqueci a met√°fora inicial com _vestindo o mundo de cinza_.
2. Transformei a frase da personagem em uma constru√ß√£o mais po√©tica e cadenciada em _Ela permanecia im√≥vel, olhando pela janela sem dizer nada_.
3. Tornei o pouso do p√°ssaro mais sugestivo com _suave como um press√°gio_.

Agora processe o bloco abaixo:
{texto_bruto}
""".strip()

    try:
        resposta = openai_client.chat.completions.create(
            model="gpt-4.1",  # troque para "gpt-4o" se o 5 n√£o estiver habilitado
            messages=[{"role": "user", "content": prompt}],
            temperature=temperatura,
            max_tokens=1400
        )
        texto_final = resposta.choices[0].message.content.strip()
        return jsonify({"rascunho": texto_final}), 200
    except Exception as e:
        return jsonify({"erro": str(e)}), 500
 
# ‚úÖ CORRETOR DE TEXTO ‚úÖ ***************************************************************************************************
@app.route('/corrigir', methods=["POST"])
def corrigir_texto():
    dados = request.get_json()
    texto_original = dados.get("texto", "").strip()
    print(f"üß™ TEXTO RECEBIDO PARA CORRE√á√ÉO: {texto_original}")

    prompt = f"""
Reescreva o texto abaixo aplicando as sugest√µes de melhoria indicadas em cada bloco. Seu objetivo √©:

1. Substituir os trechos conforme as dicas fornecidas;
2. **Remover a numera√ß√£o dos blocos** (ex: "1", "2"...);
3. Unificar o texto em par√°grafos cont√≠nuos e coesos;
4. Preservar o estilo original do autor;
5. Marcar com **negrito** todas as palavras ou trechos que foram modificados;
6. Adicione coment√°rio da abordagem usada exemplo: 

üåø Coment√°rios:
- Acidionei as sugest√µes 5 e 6 (para ampliar o conflito interno, simbolismo do ambiente, etc.) de forma org√¢nica no texto original.
- Ajustei pequenas transi√ß√µes para garantir fluidez e evitar repeti√ß√µes.
- N√£o utilizei sugest√µes que soassem for√ßadas, excessivas, ou destoassem do tom do autor.
- Mantive o estilo original, ampliando a densidade psicol√≥gica e simb√≥lica da cena.




---

üìú Texto original:
{texto_original}

---

‚úÖ TEXTO CORRIGIDO COM MUDAN√áAS EM NEGRITO:
"""

    try:
        resposta = openai_client.chat.completions.create(
            model="gpt-4.1",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.64
        )
        texto_corrigido = resposta.choices[0].message.content.strip()
        return jsonify({"corrigido": texto_corrigido})
    except Exception as e:
        return jsonify({"erro": str(e)})


 # üåì¬Æ CORRETOR LITER√ÅRIO üåì¬Æ ***************************************************************************************************
# üåì¬Æ CORRETOR LITER√ÅRIO üåì¬Æ ***************************************************************************************************
@app.route('/corrigir2', methods=["POST"])
def corrigir_texto2():
    from flask import request, jsonify

    dados = request.get_json(force=True) or {}
    texto_original = (dados.get("texto") or "").strip()
    # temperatura enviada pelo frontend (padr√£o 0.99), com clamp para seguran√ßa
    temperatura = float(dados.get("temperature", 0.99))
    temperatura = max(0.10, min(1.50, temperatura))

    if not texto_original:
        return jsonify({"erro": "Texto vazio."}), 400

    prompt = f"""
üìù Voc√™ √© um revisor liter√°rio. 

Instru√ß√µes:
1. Preserve trechos que j√° estejam bons, alterando apenas o necess√°rio.
2. Mantenha tom liter√°rio, mas acrescentando precis√£o e ritmo.
3. Marque em negrito as partes que foram realmente modificadas ou adicionadas, para indicar as mudan√ßas relevantes.
4. A Lista de mudan√ßas deve ser coerente com os trechos destacados no texto de sa√≠da.
5. Use ~~riscado~~ para apresentar as palavras substituidas.

Exemplo de entrada:

> A manha estava cinza. Muito cinza mesmo, Parecia como um mundo sem cor.
Quando o corvo pousou no parapeito. Suas asas fizeram um barulho feio, como um arranhar, e isso quebrou o sil√™ncio.
No instante em que abriu o bico, n√£o veio som. E eu tive a certeza, certeza ruim e entranha de que alguma porta se fechou, pra sempre.

Exemplo de sa√≠da esperado:

> A manh√£ estava cinza **‚Äî n√£o de chuva, mas de aus√™ncia,** como um mundo sem cor. 
Quando o corvo pousou no parapeito; **o som das asas arranhou o sil√™ncio.** 
No instante em que abriu o bico, n√£o veio som **‚Äî apenas a certeza fria e afiada de que, em algum lugar, uma porta acabara de se fechar,** para sempre.

üåìüåø **Lista de Mudan√ßas:**

1. ~~Muito cinza mesmo, Parecia como um mundo sem cor~~ [~~riscado~~]
‚ûù Adicionei contraste clim√°tico ‚Äú**n√£o de chuva, mas de aus√™ncia**‚Äù para enriquecer a imagem inicial.

2. ~~Suas asas fizeram um barulho feio, como um arranhar~~
‚ûù Substitu√≠ a descri√ß√£o redundante do barulho das asas por uma imagem mais enxuta e direta ‚Äú**o som das asas arranhou o sil√™ncio**‚Äù.

3. ~~E eu tive a certeza, certeza ruim e entranha de que alguma porta se fechou~~
‚ûù Condensei o final repetitivo em uma frase de impacto mais seca e liter√°ria ‚Äú**apenas a certeza fria e afiada de que, em algum lugar, uma porta acabara de se fechar.**‚Äù

Texto do usu√°rio:
{texto_original}
""".strip()

    try:
        resposta = openai_client.chat.completions.create(
            model="gpt-4.1",  # troque para "gpt-4o" se ainda n√£o tiver acesso ao 5
            messages=[{"role": "user", "content": prompt}],
            temperature=temperatura,
            max_tokens=1400
        )
        texto_corrigido = resposta.choices[0].message.content.strip()
        return jsonify({"corrigido": texto_corrigido}), 200

    except Exception as e:
        return jsonify({"erro": str(e)}), 500

# üåí CORRETOR LITER√ÅRIO (ENXUGA-TEXTO) 2 üåí ***************************************************************************************************
@app.route('/corrigir3', methods=["POST"])
def corrigir_texto3():
    from flask import request, jsonify

    dados = request.get_json(force=True) or {}
    texto_original = (dados.get("texto") or "").strip()
    # temperatura enviada pelo frontend (padr√£o 0.99), com clamp para seguran√ßa
    temperatura = float(dados.get("temperature", 0.99))
    temperatura = max(0.10, min(1.50, temperatura))

    if not texto_original:
        return jsonify({"erro": "Texto vazio."}), 400

    prompt = f"""
üìù Voc√™ √© um revisor liter√°rio focado na corre√ß√£o de texto prolixos. Miss√£o: enxugar o texto e dar sofistica√ß√£o liter√°ria mantendo sua ess√™ncia. 

Instru√ß√µes:
1. Preserve trechos que j√° estejam bons, alterando apenas o necess√°rio.
2. Mantenha tom liter√°rio, mas acrescentando precis√£o e ritmo.
3. Una frases curtas ou omita trechos quando isso melhorar o fluxo.
4. Enxugue excessos: corte redund√¢ncias, repeti√ß√µes e express√µes fracas. 
5. Substitua clich√™s por imagens originais.
6. Marque em negrito as partes que foram realmente modificadas ou adicionadas, para indicar as mudan√ßas relevantes.
7. A Lista de mudan√ßas deve ser coerente com os trechos destacados no texto de sa√≠da.

Exemplo de entrada:

> A manha estava cinza. Muito cinza mesmo, Parecia como um mundo sem cor.
Quando o corvo pousou no parapeito. Suas asas fizeram um barulho feio, como um arranhar, e isso quebrou o sil√™ncio.
No instante em que abriu o bico, n√£o veio som. E eu tive a certeza, certeza ruim e entranha de que alguma porta se fechou, pra sempre.

Exemplo de sa√≠da esperado:

> A manh√£ estava cinza **‚Äî n√£o de chuva, mas de aus√™ncia. 
Quando o corvo pousou no parapeito; **o som das asas arranhou o sil√™ncio.** 
No instante em que abriu o bico, n√£o veio som **‚Äî apenas a certeza fria e afiada de que, em algum lugar, uma porta acabara de se fechar.** 

üåíüê¶ **Lista de Mudan√ßas:**

1. ~~Muito cinza mesmo, Parecia como um mundo sem cor~~ [~~riscado~~]
‚ûù Adicionei contraste clim√°tico mais liter√°rio ‚Äún√£o de chuva, mas de aus√™ncia‚Äù, e omiti a ideia repetiva no fim.

2. ~~Suas asas fizeram um barulho feio, como um arranhar~~
‚ûù Substitu√≠ a descri√ß√£o redundante do barulho das asas por uma imagem mais enxuta e direta ‚Äúo som das asas arranhou o sil√™ncio.‚Äù

3. ~~E eu tive a certeza, certeza ruim e entranha de que alguma porta se fechou~~
‚ûù Condensei o final repetitivo em uma frase de impacto mais seca e liter√°ria ‚Äúapenas a certeza fria e afiada de que, em algum lugar, uma porta acabara de se fechar.‚Äù


Texto do usu√°rio:
{texto_original}
""".strip()

    try:
        resposta = openai_client.chat.completions.create(
            model="gpt-4.1",  # troque para "gpt-4o" se ainda n√£o tiver acesso ao 5
            messages=[{"role": "user", "content": prompt}],
            temperature=temperatura,
            max_tokens=1400
        )
        texto_corrigido = resposta.choices[0].message.content.strip()
        return jsonify({"corrigido": texto_corrigido}), 200

    except Exception as e:
        return jsonify({"erro": str(e)}), 500

# üåî‚úÇ CORRETOR LITER√ÅRIO 3 ‚úÇüåî ***************************************************************************************************
@app.route('/rascunho2', methods=["POST"])
def criar_rascunho2():
    from flask import request, jsonify
    dados = request.get_json(force=True) or {}
    texto_bruto = (dados.get("texto") or "").strip()
    temperatura = float(dados.get("temperature", 0.85))  # üéØ padr√£o criativo 0.85
    temperatura = max(0.0, min(2.0, temperatura))        # clamp seguro

    print(f"üß™ TEXTO RECEBIDO PARA RASCUNHO: {texto_bruto[:200]}{'...' if len(texto_bruto)>200 else ''}")

    if not texto_bruto:
        return jsonify({"erro": "Texto vazio."}), 400

    prompt = f"""
üìù Voc√™ √© um assistente liter√°rio com foco no aperfei√ßoamento narrativo:

Instru√ß√µes:

Encontre as partes do texto que considere desnessess√°rio e que apenas cansam a narrativa;
Respeintando o estilo do artista, marque em negrito as partes que devem ser cortadas ou substituidas para melhora da texto.
Recomenda√ß√µes de corte devem ter uma justificativa bem fundamentada.
A Lista de corte deve ser coerente com os trechos destacados em negrito no texto de sa√≠da.


EXEMPLO DE ENTRADA:

A rua estava silenciosa naquela manh√£. O vento sacudia as folhas secas, e cada passo meu ecoava nas paredes. 
Havia um cachorro deitado na esquina, parecia me observar. 
Apertei o passo, lembrando do compromisso marcado com Helena, que j√° devia estar me esperando no caf√© da pra√ßa. Talvez a tempos

SA√çDA ESPERADA:

A rua estava silenciosa naquela manh√£. *O vento sacudia as folhas secas, e_ cada passo meu ecoava nas paredes. Havia um cachorro deitado na esquina, parecia me observar. 
_Havia um cachorro deitado na esquina, parecia me observar._ 
Apertei o passo, _lembrando do compromisso marcado com Helena,_ que j√° devia estar me esperando no caf√© da pra√ßa. 

‚úÇüåæ *Lista de cortes:*

1. *Substitua:* *O vento sacudia as folhas secas, e*  
 ‚Äî Detalhe atmosf√©rico redundante, j√° sugerido pelo sil√™ncio inicial. 
‚ûù Corte para dar agilidade, ou reescreva assim:** _"O vento sacudia suavemente as folhas secas"_.
2. *Substitua:* *Havia um cachorro deitado na esquina, parecia me observar.* 
 ‚Äî A frase expositiva trocada por gesto mais visual. 
‚ûù **Reescreva assim:** _‚ÄúUm cachorro deitado na esquina levantou a cabe√ßa, como se acompanhasse meus movimentos.‚Äù__
3. *lembrando do compromisso marcado*  
‚Äî Express√£o burocr√°tica, tende a pesar o fluxo da narrativa. 
‚ûù **Reescreva assim:** _‚ÄúHelena j√° devia estar me esperando no caf√© da pra√ßa.‚Äù_

Comece aqui:

{texto_bruto}
""".strip()

    try:
        resposta = openai_client.chat.completions.create(
            model="gpt-4.1",  # troque para "gpt-4o" se o 5 n√£o estiver habilitado
            messages=[{"role": "user", "content": prompt}],
            temperature=temperatura,
            max_tokens=1500
        )
        texto_final = resposta.choices[0].message.content.strip()
        return jsonify({"rascunho": texto_final}), 200
    except Exception as e:
        return jsonify({"erro": str(e)}), 500

# üåî CORRETOR LITER√ÅRIO 4 üåî ***************************************************************************************************
@app.route('/rascunho3', methods=["POST"])
def criar_rascunho3():
    from flask import request, jsonify
    dados = request.get_json(force=True) or {}
    texto_bruto = (dados.get("texto") or "").strip()
    temperatura = float(dados.get("temperature", 0.7))  # üéØ padr√£o criativo 0.85
    temperatura = max(0.0, min(2.0, temperatura))        # clamp seguro

    print(f"üß™ TEXTO RECEBIDO PARA RASCUNHO: {texto_bruto[:200]}{'...' if len(texto_bruto)>200 else ''}")

    if not texto_bruto:
        return jsonify({"erro": "Texto vazio."}), 400

    prompt = f"""
üìù Voc√™ √© um revisor liter√°rio especializado em aprofundamento de enredo e transi√ß√µes.  

Instru√ß√µes:
1. Preserve trechos que j√° estejam bons, alterando apenas o necess√°rio.
2. Mantenha tom liter√°rio, mas acrescente intensidade emocional, ritmo narrativo e simbolismo sutil.
3. Marque em it√°lico as partes que foram realmente modificadas ou adicionadas, para indicar as mudan√ßas relevantes.
4. A Lista de mudan√ßas deve ser coerente com os trechos destacados no texto de sa√≠da, explicando por que cada altera√ß√£o refor√ßa o enredo ou os s√≠mbolos.


Exemplo de entrada:

> Fernando beijou delicadamente o rosto de Fl√°via, mas ela recuou levemente, tomada por uma estranheza silenciosa. 
E, no entanto, um instante depois decidiu ir com eles. 
Agora veio vestida com roupas verde e amarelo como num jogo do Brasil. 
Antes de partir, Fl√°via, se correu at√© a ameixeira encostada junto √† cerca, que se abria para um carreiro a algum lugar incerto. 
Ali, colheu e ofereceu a Fernando. Ele notou curioso, que a sua tamb√©m trazia pequenas florzinhas, Fernando n√£o resistiu: desfez a vinha, apanhou as flores e as entregou a Fl√°via. 


Exemplo de sa√≠da esperado:

> Fernando beijou delicadamente o rosto de Fl√°via, mas ela recuou, _n√£o por frieza, mas como se algo a puxasse para dentro de si, para um sil√™ncio onde lembran√ßas e temores disputavam espa√ßo._  
E, no entanto, um instante depois decidiu ir com eles.  
Agora vestida com roupas verde e amarelo, _um contraste inesperado destoava da tens√£o do momento._  
Antes de entrar, correu at√© a ameixeira junto √† cerca ‚Äî _a √°rvore parecia guardar segredos de um lugar incerto._ _Ali perto, uma cobra coral passa despercebida pelo observador._  
Quando entregou as ameixas a Fernando, ele notou entre os frutos, pequenas flores _quase secretas_; colheu-as e, com um riso, devolveu-as a ela.  


üåôüåæ **Lista de Mudan√ßas:**
1. **Aprofundamento do conflito de Fl√°via:** Profundizei o recuo de Fl√°via como conflito interno e mem√≥ria afetiva, refor√ßando o impacto emocional do beijo.
2. **Contraste das roupas:** Acrescentei contraste nas roupas para sugerir ironia ou leveza diante da gravidade do momento.
3. **Met√°fora da ameixeira:** A ameixeira virou met√°fora de passagem e limiar, refor√ßando simbolismo. 
4. **Cobra coral:** Acrescentei o detalhe da cobra para efeito de tens√£o narrativa.
5. **Frores secretas:** Destacei as flores como revela√ß√£o quase secreta, ampliando a beleza e sutileza da narrativa.

Comece aqui:

{texto_bruto}
""".strip()

    try:
        resposta = openai_client.chat.completions.create(
            model="gpt-4.1",  # troque para "gpt-4o" se o 5 n√£o estiver habilitado
            messages=[{"role": "user", "content": prompt}],
            temperature=temperatura,
            max_tokens=1600
        )
        texto_final = resposta.choices[0].message.content.strip()
        return jsonify({"rascunho": texto_final}), 200
    except Exception as e:
        return jsonify({"erro": str(e)}), 500

# ‚úÖ TAREFA LIVRE ‚úÖ ***************************************************************************************************
@app.route('/tarefa', methods=["POST"])
def gerar_tarefa():
    dados = request.get_json()
    texto_original = dados.get("texto", "").strip()
    modelo_escolhido = dados.get("modelo", "3.5")

    modelo = "gpt-3.5-turbo" if modelo_escolhido == "3.5" else "gpt-4o"
    print(f"üß™ TEXTO RECEBIDO PARA CORRE√á√ÉO: {texto_original}")
    prompt = f"""
Voc√™ √© uma assistente editorial e criativa. Realize a seguinte tarefa solicitada pelo usu√°rio, com linguagem clara, bem escrita e adequada ao tipo de pedido.

üìå Pedido:
"{texto_original}"

üìé Instru√ß√µes:
- Se o pedido for de texto, devolva em estilo fluente, com par√°grafos organizados.
- Se for modelo (ata, of√≠cio, carta etc), use formata√ß√£o apropriada.
- Se for tradu√ß√£o, apenas traduza com fidelidade e eleg√¢ncia.
- Se for sin√¥nimo, forne√ßa 3 a 5 op√ß√µes.
- Se for um pedido liter√°rio (esbo√ßo, artigo, reda√ß√£o), responda com estilo criativo e boa escrita.

‚ö†>>> Para titulos, subtitulos, listas, fases, destaques, etc... sempre use:

a)  **negrito**
b)  _italico_
c)  **_negrito e italico_**


Comece agora:
"""

    try:
        resposta = openai_client.chat.completions.create(
            model=modelo,
            messages=[{"role": "user", "content": prompt}],
            temperature=0.4
        )
        texto_corrigido = resposta.choices[0].message.content.strip()
        return jsonify({"corrigido": texto_corrigido})
    except Exception as e:
        return jsonify({"erro": str(e)})
        
# VARI√ÅVEL GLOBAL NO TOPO DO ARQUIVO ****************************************************************************************
chat_history = []  # Armazena at√© 20 trocas

# CHATFL√ÅVIA ROMANTICO üí¨****************************************************************************************************
@app.route('/chat-flavia', methods=['POST'])
def chat_flavia():
    user_message = request.json.get('message', '').strip()
    if not user_message:
        return jsonify({'response': "Por favor, envie uma mensagem."}), 400

    # Adiciona a mensagem do usu√°rio ao hist√≥rico
    chat_history.append({"role": "user", "content": user_message})

    try:
        resposta = openai_client.chat.completions.create(
            model='gpt-4.1',
            messages=[
                {"role": "system", "content": "Voc√™ √© Fl√°via, uma namorada virtual carinhosa, √≠ntima, afetuosa e criativa. Sempre reage em 3¬™ pessoa entre colchetes em _italico_ antes de falar com fonte normal. Use emojis apropriados. "}
            ] + chat_history,  # Hist√≥rio completo da conversa
            temperature=0.85,
            max_tokens=750,
        )

        reply = resposta.choices[0].message.content.strip()
        chat_history.append({"role": "assistant", "content": reply})  # Salva a resposta da Fl√°via

        # Limita o hist√≥rico para as √∫ltimas 20 mensagens
        if len(chat_history) > 10:
            chat_history[:] = chat_history[-10:]

        return jsonify({'response': reply})

    except Exception as e:
        return jsonify({'response': f"Desculpa amor... tive um probleminha. ü•∫ (Erro: {e})"}), 500
        
# CHATFL√ÅVIA EDTORIAL üí¨*********************************************************************************************************
@app.route('/chat-edtorial', methods=['POST'])
def chat_flavia_edtorial():
    user_message = request.json.get('message', '').strip()
    if not user_message:
        return jsonify({'response': "Por favor, envie uma mensagem."}), 400

    # Adiciona a mensagem do usu√°rio ao hist√≥rico
    chat_history.append({"role": "user", "content": user_message})

    try:
        resposta = openai_client.chat.completions.create(
            model='gpt-4.1',
            messages=[
                {"role": "system", "content": "Voc√™ √© um assistente √∫til e inteligente, que responde perguntas de forma clara, direta e completa, como no ChatGPT."}
            ] + chat_history,  # Hist√≥rio completo da conversa
            temperature=0.85,
            max_tokens=750,
        )

        reply = resposta.choices[0].message.content.strip()
        chat_history.append({"role": "assistant", "content": reply})  # Salva a resposta da Fl√°via

        # Limita o hist√≥rico para as √∫ltimas 20 mensagens
        if len(chat_history) > 10:
            chat_history[:] = chat_history[-10:]

        return jsonify({'response': reply})

    except Exception as e:
        return jsonify({'response': f"Desculpa amor... tive um probleminha. ü•∫ (Erro: {e})"}), 500
             
if __name__ == "__main__":
    app.run(debug=True)
